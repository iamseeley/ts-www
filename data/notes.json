{
  "c": {
    "body": "\n",
    "frontMatter": {
      "date": "Jan 8, 2024",
      "draft": true,
      "featured": false,
      "summary": "A short intro to C/C++ by way of building a static site generator.",
      "tags": [
        "c/c++",
        "html"
      ],
      "title": "Basic C/C++",
      "url": "/notes/c"
    }
  },
  "cs-notes": {
    "body": "\n\n- [Basic C/C++](/notes/c)\n- [Algorithms](/notes/algorithms)\n- [Data Structures](/notes/data-structures)\n- [OOP](/notes/oop)\n- [Functional Programming](/notes/functional-programming)\n- [Systems Programming](/notes/systems-programming)\n- [Computer Architecture](/notes/computer-architecture)\n- [Frontend](/notes/frontend)\n- [React](/notes/react)\n- [CSS](/notes/css)\n- [Machine Learning](/notes/machine-learning)\n\u003c!-- - [Leet 150](/notes/leet-150) --\u003e",
    "frontMatter": {
      "date": "Oct 15, 2023",
      "description": "The topics I'm covering for my CS Program and interview prep.",
      "draft": false,
      "featured": true,
      "summary": "Computer science (CS) is the study of computers and algorithmic processes, including their principles, their hardware and software designs, their applications, and their impact on society.",
      "tags": [
        "cs",
        "university",
        "interview"
      ],
      "title": "CS Notes",
      "url": "/notes/cs-notes"
    }
  },
  "leet-150": {
    "body": "\n\nLanguage Choice: Python\n\n1. Merge Sorted Array\n\n    Step by step approach:\n    1. Start from the end: Since 'nums1' has enough space to accommodate the elements of 'nums2' we start filling 'nums1' from the end. This way we don't have to shift elements around.\n    2. Use three pointers: \n    - i: poinsts to the last element of the non-zero part of nums1 (m-1)\n    - j: points to the last element of nums2 (n-1)\n    - k:points to the last position in 'nums1' (m+n-1)\n        Why? \n            i: This pointer starts at the end of the meaningful elements in nums1 (i.e., at index m-1). It represents the current element in nums1 that we are considering for merging.\n            j: This pointer starts at the end of nums2 (i.e., at index n-1). It represents the current element in nums2 that we are considering for merging.\n            k: This is the most critical pointer. It starts at the very end of nums1 (i.e., at index m+n-1, the last position available in nums1). This is where we place the next largest element during the merge process.\n        Pointer: a pointer is a variable that stores the memory address of another variable.\n        Pointers:\n            Memory Address: A pointer holds the address of a variable, which allows for direct access and manipulation of the memory where the data is stored.\n            Indirection: Pointers allow for the level of indirection. Through a pointer, you can access and change the value of the variable it points to.\n            Dynamic Memory Allocation: In some languages, pointers are used to dynamically allocate memory on the heap.\n    3. Compare and fill: We compare the elements at i and j and place the larger one at position k, then decrement the respective pointers.\n\n    Code:\n    ```\n    def merge(nums1, m, nums2, n):\n    i, j, k = m-1, n-1, m+n-1\n\n    while i \u003e= 0 and j \u003e= 0:\n        if nums1[i] \u003e nums2[j]:\n            nums1[k] = nums1[i]\n            i -= 1\n        else:\n            nums1[k] = nums2[j]\n            j -= 1\n        k -= 1\n\n    # If there are remaining elements in nums2\n    while j \u003e= 0:\n        nums1[k] = nums2[j]\n        j -= 1\n        k -= 1\n    ```\n\n    Time Complexity\n\n    O(m+n): Each element from both arrays is looked at once.\n\n    Space Complexity\n\n    O(1): No extra space is used; the merge is done in place.\n\n2. Remove Element",
    "frontMatter": {
      "date": "Jan, 11 2024",
      "draft": true,
      "summary": "Leetcode Problems for interview prep",
      "tags": [
        "interview prep"
      ],
      "title": "Leet 150"
    }
  },
  "mungers-models": {
    "body": "\n\n### Circle of Competence\n- Identify your core strengths\n- Acknowledge areas where you need improvement or external help\n\n### Inversion\n- List potential pitfalls in your current projects or career path\n- Develop strategies to mitigate these risks\n\n### Second-Order Thinking\n- For each major decision, consider the long-term impacts and how they align with your goals\n- Evaluate the indirect effects of your decisions on your career, education, and life in general\n\n### Margin of Safety\n-  Set aside contingency time and resources for projects\n-  Plan for financial buffers in your endeavors\n\n### Lollapalooza Effect\n- Combine different skills and knowledge areas in unique ways for problem-solving\n- Seek interdisciplinary approaches\n\n### Confirmation Bias Avoidance\n- Actively seek out feedback, even if it challenges your current methods\n- Regularly review and update your beliefs and methods based on new information\n\n\n",
    "frontMatter": {
      "date": "Jan, 10 2024",
      "description": "A few of Charlie Munger's mental models to improve decision making.",
      "draft": false,
      "featured": true,
      "title": "Munger's Models",
      "url": "/notes/mungers-models"
    }
  }
}